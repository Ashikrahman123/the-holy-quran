generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String            @unique
  username          String            @unique
  password          String
  image             String?
  emailVerified     DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  role              Role              @default(USER)
  preferences       UserPreference?
  memories          Memory[]
  bookmarks         Bookmark[]
  passwordResetTokens PasswordResetToken[]
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model UserPreference {
  id                String    @id @default(cuid())
  userId            String    @unique
  theme             String    @default("light")
  language          String    @default("en")
  fontSize          String    @default("medium")
  translationSource String    @default("en.sahih")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Memory {
  id                String    @id @default(cuid())
  userId            String
  key               String
  data              String    @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, key])
}

model Bookmark {
  id                String    @id @default(cuid())
  userId            String
  surahId           Int
  ayahNumber        Int
  note              String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, surahId, ayahNumber])
}

model PasswordResetToken {
  id                String    @id @default(cuid())
  token             String    @unique
  userId            String
  expires           DateTime
  createdAt         DateTime  @default(now())
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
